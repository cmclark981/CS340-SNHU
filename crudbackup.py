#CS340 Module 7 Final Project#Christopner Clark#August 14, 2022from pymongo import MongoClientfrom bson.objectid import ObjectId"""Declare the AnimalShelter class. This class will be used to provide code for the CRUD operations needed for database operations within the stack"""class AnimalShelter(object):                                                      def __init__(self, username, password):        """ Here we define the init method and pass the self, username, and password parameters        Below we define the client to connect to our database at the port specified and 	    pass the username and password. We then declare which databse to connect to	    """        self.client = MongoClient('mongodb://%s:%s@localhost:35369/AAC' % (username, password))                self.database = self.client['AAC']    # define create method for database CRUD operations. Pass data entry    def create(self, data):                """ Here we define the cerate method for CRUD operations with the databse. 	    If data is present we run the method. In this case we return and ackknowledge	    the data  input is added to the database. Otherwise if the data input is empty, 	    we output an exception error and print the message. 	    """        if data is not None:                        return self.database.animals.insert_one(data).acknowledged        else:                        raise Exception("Error: 'data' parameter is null")        return False        def read(self, query):        """Here we define the read method for CRUD operations with the databse.	    If the query returns no data, the output is empty. Otherwise the system	    returns the quesry as set in the test script. 	    """        if query is None:                        query = {}                return self.database.animals.find(query, {"_id": False})    def update(self, initial, change):                """Here we define the update method for CRUD operations with the database.        If there are documents to update in the databse the method will update the changes        made and return the new result. If no documents are found, the method returns a message.         Should the data input to change be empty, the method raises and exception and returns        the error message.        """        if initial is not None:            if self.database.animals.count_documents(initial, limit = 1) != 0:                update_result = self.database.animals.update_many(initial, {"$set": change})                result = update_result.raw_result            else:                result = "No document was found"            return result        else:            raise Exception("Update not complete, user input empty. Please input data to update.")    def delete(self, remove):                """Here we define the delete method for CRUD operations with the database. If there are         documents in the database the method will remove the data and return the result. If there         are no documents matching the user input, the method will return a message. If the user input        is empty, the method will raise an exception and return the error mosseage.        """        if remove is not None:            if self.database.animals.count_documents(remove, limit = 1) != 0:                delete_result = self.database.animals.delete_many(remove)                result = delete_result.raw_result            else:                result = "No document was found"            return result        else:            raise Exception("Data removal no compplete, user iput empty. Please input data to remove.")      